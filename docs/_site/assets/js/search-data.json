{
  
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "http://localhost:4000/astrocook/404.html",
    "relUrl": "/404.html"
  }
  ,"1": {
    "title": "About",
    "content": "About . Astrocook is developed at INAF-Osservatorio Astronomico di Trieste by Guido Cupani, Giorgio Calderone, and Stefano Russo, with contributions from Stefano Cristiani and Giuliano Taffoni. .",
    "url": "http://localhost:4000/astrocook/about.html",
    "relUrl": "/about.html"
  }
  ,"2": {
    "title": "Modeling absorbers",
    "content": "Modeling absorbers . . .",
    "url": "http://localhost:4000/astrocook/absorbers.html",
    "relUrl": "/absorbers.html"
  }
  ,"3": {
    "title": "Absorbers cookbook",
    "content": "Absorbers cookbook . . .",
    "url": "http://localhost:4000/astrocook/absorbers_cb.html",
    "relUrl": "/absorbers_cb.html"
  }
  ,"4": {
    "title": "Common tasks",
    "content": "Common tasks . A reference collection of step-by-step analysis procedures .",
    "url": "http://localhost:4000/astrocook/common.html",
    "relUrl": "/common.html"
  }
  ,"5": {
    "title": "Continuum estimation",
    "content": "Continuum estimation . With Astrocook, you can estimate the emission continuum of a source by iteratively detecting and removing the absorption lines. Here we use a quasar spectrum as an example, but the task can be generalized to other sources. . . . Start a session | Detect the absorption lines | . Start a session . Detect the absorption lines .",
    "url": "http://localhost:4000/astrocook/continuum.html",
    "relUrl": "/continuum.html"
  }
  ,"6": {
    "title": "Continuum cookbook",
    "content": "Continuum cookbook . . .",
    "url": "http://localhost:4000/astrocook/continuum_cb.html",
    "relUrl": "/continuum_cb.html"
  }
  ,"7": {
    "title": "Cookbooks",
    "content": "Cookbooks . A close-up look at all the available recipes .",
    "url": "http://localhost:4000/astrocook/cookbook.html",
    "relUrl": "/cookbook.html"
  }
  ,"8": {
    "title": "Managing data",
    "content": "Managing data . More details on what you can do with your data .",
    "url": "http://localhost:4000/astrocook/data.html",
    "relUrl": "/data.html"
  }
  ,"9": {
    "title": "General cookbook",
    "content": "General cookbook . . .",
    "url": "http://localhost:4000/astrocook/general_cb.html",
    "relUrl": "/general_cb.html"
  }
  ,"10": {
    "title": "Using the GUI",
    "content": "Using the GUI . . Launch the GUI | Manage sessions | Use recipes | Save sessions | Quit the GUI | Troubleshooting | . Launch the GUI . You can launch the Astrocook GUI: . $ cd /your/path/astrocook/ $ python ac_gui.py . This will open a blank main window: . . ‚ö†Ô∏è On some macOS systems, python ac_gui.py will produce an error message like this: . This program needs access to the screen. Please run with a Framework build of python, and only when you are logged in on the main display of your Mac. . If this happens, use pythonw ac_gui.py instead. . To load data, you can choose File &gt; Open... on the menu bar (ctrl+O or ‚åò+O, depending on the system) and browse through your file system. Alternatively, you can specify one or more paths directly at launch: . $ python ac_gui.py /path/to/1st_spec.fits /path/to/2nd_spec.fits . In this case the main window will display a list: . . If the format of the data is not recognized, Astrocook will fall back on a blank window. . Manage sessions . Each item in the main window is called a session. A session is created whenever a new spectrum is loaded. When you select a session on the main window, its spectrum is displayed in the plot window: . . To perform the analysis, you need to select a session and access one of the several recipes available from the menu bar. The information extracted by the analysis is continuously attached to the selected session. This means that, e.g., a list of absorption lines is always attached to the spectrum it has been extracted from. . You can switch between sessions at any time, selecting them on the main window. When you select a session, you always retrieve the latest snapshot of the analysis, together with all the information extracted so far. . ‚ö†Ô∏è If no session is selected and you click on the first session, it will not be selected unless you hold ctrl as well. . Use recipes . Astrocook provides you with (broadly speaking) three kind of recipes for the analysis: . recipes to manipulate sessions, combining and sharing data structures among them: these are grouped in the Edit menu; | recipes to manage the plot window and the additional windows to display the data: these are grouped in the View menu; | general analysis recipes to ‚Äúcook your spectrum‚Äù: these are spread between the Recipes menu (atomic operations and simple workflows) and the Set menus menu (complex workflows for specific tasks). | Typically, when you choose a recipe from the menu bar a dialog window appears. The dialog window displays a brief description of the recipe and allows you to edit the parameters. . . ‚ö†Ô∏è When you click on the run button in a dialog window, the whole GUI freezes. You should consider this before using recipes that require long running times. . At the beginning of the analysis, only a limited set of recipes is available from the menu bar, while others are greyed out. This happens because the greyed-out recipes require some piece of information that has not been extracted yet (e.g., to fit an absorption systems you need to detect it first). As you progresses with the analysis, more and more recipes become available. . Save sessions . You can save a session by clicking on it on the main window and choosing File &gt; Save... on the menu bar (ctrl+S or ‚åò+S, depending on the system). . Sessions are saved as .acs archives that can be directly opened by Astrocook (either with File &gt; Open... or as argument of python ac_gui.py from the command line). .acs archives can also be extracted with . $ tar -zxvf /path/to/archive.acs . Quit the GUI . You can quit Astrocook with File &gt; Quit... on the menu bar (ctrl+Q or ‚åò+Q, depending on the system) or by closing the main window. . ‚ö†Ô∏è When you quit Astrocook, all unsaved sessions will be lost. . Troubleshooting . Occasionally, Astrocook may behave erratically. If this happens, you are strongly encouraged to report the bug. . ‚ö†Ô∏è If Astrocook stops responding, you can kill the GUI with ctrl+C. Since this will destroy all sessions, you are suggested to frequently save your analysis. .",
    "url": "http://localhost:4000/astrocook/gui.html",
    "relUrl": "/gui.html"
  }
  ,"11": {
    "title": "Home",
    "content": "Astrocook üç™ . A thousand recipes to cook as spectrum .",
    "url": "http://localhost:4000/astrocook/",
    "relUrl": "/"
  }
  ,"12": {
    "title": "Merging spectra",
    "content": "Merging spectra . . Rescale the spectra | Combine the spectra | Rebin the combined spectrum | . Merging is what you do to combine two or more spectra into a single one. In this tutorial, you will learn how to merge two spectra with different wavelength range, like those obtained from different arms of the same instrument (in our case, VIS and NIR arm of VLT X-shooter). The same procedure can be applied to the case of several spectra with the same wavelength range. . We assume that the spectra have already been loaded in Astrocook: . . Rescale the spectra . The first step is to rescale the spectra to the same flux level, to correct for inaccuracies in flux calibration. If you select both spectra by holding ctrl while clicking on the main window and zoom into the plot, you will see that in the VIS/NIR superposition region the flux is mismatched: . . To rescale the NIR spectra to the VIS one, select it on the main window and choose Edit &gt; Scale y axis.... In the dialog window, insert a suitable multiplicative factor and click on Run: . . Selecting both spectra and zooming again, you can check that they are now matching: . . You may need to rescale a spectrum several times to find a good matching. . ‚ö†Ô∏è Please note that the spectra are rescaled in place, without starting a new session. To undo a rescaling, you need to rescale the spectrum again with inverse factor. . Combine the spectra . Once spectra are rescaled, you need to create a combined session out of the individual ones. In the main window, select both sessions and choose Edit &gt; Combine sessions.... You will be asked for a name for the combination: . . The asterisk will be replaced by a concatenation of the selected names (qso_NIR_qso_VIS in this case). You can also define your own name. . On Run, a new session will be created: . . The spectrum of this new session contains all the entries of the combined spectra. This means that the pixels of the combined spectrum may overlap with each other (as they keep their original size, defined by xmin and xmax in the spectrum table). . The same method can be of course used to combine more than two spectra. . ‚ö†Ô∏è When sessions are combined, only the spectra are actually combined. All other data structures are not considered. . Rebin the combined spectrum . It is generally useful to rebin the combined spectrum into a new wavelength grid, to avoid dealing with overlapping pixels. This is done by selecting the combined session in the main window and choosing Recipes &gt; Rebin spectrum.... You will be asked to provide a step in x and a unit of wavelength or velocity for the output spectrum: . . In this case, the spectrum will be rebinned into a grid with a fixed step of 10 km/s. The grid is designed to cover the whole wavelength range of the input spectrum. The rebinned spectrum will appear on the plot after completion: . . ‚ö†Ô∏è Rebinning may take a long time if the grid is fine and/or the wavelength range is wide. . You can rebin any spectrum in any session using the same procedure. . ‚ö†Ô∏è Please remember that the rebinning procedure interferes with the statistics of your data, as it introduces correlation among adjacent pixels. If accurate flux statistics is required, please avoid rebinning your spectra when it is not absolutely necessary. .",
    "url": "http://localhost:4000/astrocook/merge.html",
    "relUrl": "/merge.html"
  }
  ,"13": {
    "title": "Plots",
    "content": "Plots . . .",
    "url": "http://localhost:4000/astrocook/plots.html",
    "relUrl": "/plots.html"
  }
  ,"14": {
    "title": "Setup",
    "content": "Setup . . Dependencies | Install the package | . Dependencies . Astrocook is written in Python 3 and requires the following packages: . Astropy 3.2.3 | SciPy 1.3.1 | Specutils 0.6 | NumPy 1.17.3 | LmFit 0.9.14 | Cycler 0.10.0 | StatsModels 0.10.1 | matplotlib 3.1.1 | Sphinx 2.2.0 | wxPython 4.0.4 | . You are suggested to manage the dependencies using Conda. The quickest way to do it is to get the Miniconda installer (instructions here) and to open an environment dedicated to Astrocook: . $ conda create -n astrocook python=3.7 $ source activate astrocook . This is an example of how you can install the required packages from the Conda repository: . $ conda install -c anaconda package-name=package-version . If this doesn‚Äôt work, look for the package in the Anaconda Cloud. . Install the package . Clone the GitHub repository on your local machine: $ cd /your/path/ $ git clone https://github.com/DAS-OATs/astrocook . | Fetch the last commit of the develop branch $ cd /your/path/astrocook/ $ git fetch origin develop $ git checkout develop . | ‚ö†Ô∏è The current documentation applies to v1.0.0, which has not been released yet. You are suggested to work on the develop branch until it gets merged on the master branch. .",
    "url": "http://localhost:4000/astrocook/setup.html",
    "relUrl": "/setup.html"
  }
  ,"15": {
    "title": "Getting started",
    "content": "Getting started . Everything you need to know to quickly start your analysis .",
    "url": "http://localhost:4000/astrocook/start.html",
    "relUrl": "/start.html"
  }
  ,"16": {
    "title": "Data structures",
    "content": "Data structures . . Spectra | List of lines | List of absorption systems | . Astrocook manages three main data structures: spectra, line lists, and system lists. All three structures include a data table (actually an Astropy Table object) and a metadata dictionary. They are formatted as FITS files and bundled into a .acs archive when you save a snapshot of a session. The .acs archive may also contain other ancillary data, as described below. . To display the data tables, choose View &gt; Spectrum table (or Line table or System table) from the menu bar. . ‚ö†Ô∏è Long tables can take a long time to display. . ‚ö†Ô∏è Closing table windows may cause Astrocook to behave erratically. . Spectra . Each Astrocook session is based on a spectrum, i.e. a table that pairs a flux-like quantity to a wavelength-like quantity. We use the expressions ‚Äúflux-like‚Äù and ‚Äúwavelength-like‚Äù to be as general as possible: from the point of view of structure, it doesn‚Äôt matter if the spectrum is expressed in wavelengths or frequencies, or if the flux density is calibrated in physical units or not. . The fundamental columns of a spectrum are: . x: the wavelength-like independent variable; | xmin, xmax: the interval in x values in which the flux-like quantity is integrated; | y, dy: the flux-like dependent variable and its error. | . The interval [xmin, xmax] is also called a pixel, because in some cases it maps to a physical pixel in the spectrograph detector. . Other columns that frequently appear in a spectrum are: . y_conv: a convolution of y with some smoothing kernel; | lines_mask: a boolean mask of the detected lines (see below); | cont: the spectral continuum, i.e. the component of y that remains after removing local features (e.g. absorption lines) and smoothing out noise; | model: a spectral model, i.e. a model of both the continuum and the absorption systems (see below; | deabs: a deabsorbed spectrum, i.e. an equivalent of y after the absorption lines have been removed using the model; | resol: the spectral resolution at x; | fit_mask: a boolean mask of the regions used to fit the model of the absorption systems. | . You are free to add other columns to the spectrum or edit the existing ones (as explained here). . List of lines . When you detect spectral lines (either in emission or absorption), they are formatted into a table that is added to the session. . The information to populate the table columns is directly extracted from the spectrum) where the lines have been detected: . x: the line center, corresponding to the x value of a pixel in the spectrum; | xmin, xmax: the boundaries of the interval covered by the line, also corresponding to the x values of two pixels in the spectrum; | y, dy: values of y and dy at x from the spectrum; | source: column of the spectrum that was used to detect the line. | . Please note that in this case [xmin, xmax] do not map to a single pixel in the spectrum, but to a range of pixels. . Lines are not typically detected on the raw y column of the spectrum, because in general the noise on y makes it very hard to discriminate between legitimate lines and random fluctuations. This is the reason for keeping track of the source of the detected lines. A typical source value is y_conv, i.e. a convolution of the y column of the spectrum with some smoothing kernel (see above) but it may be any other column. . List of absorption systems . Absorption lines detected in quasar spectra are frequently grouped into absorption systems, i.e. sets of lines produced by different ions at the same redshift. . In our convention, a system has one and only one redshift. This means that e.g. different doublets at a similar redshift are treated as separated (one redshift per doublet). It also means that each component of an absorbers with a complex velocity structure (also sometimes called a ‚Äúsystem‚Äù) is considered a system in itself. . When you detect absorption systems, they are also formatted into a table added to the session. The table contains the information to model the absorption systems: . func: the function used to define the model (currently, only the Voigt function voigt is available); | series: the list of ionic transitions that are modeled; | z0: the starting redshift, typically computed from the x value of one or more absorption lines; | z, dz: the redshift of the model and its error; | logN, dlogN: the logarithm of the column density used in the Voigt function (in cm^-2) and its error; | b, db: the doppler parameter used in the Voigt function and its error; | resol: the resolution adopted by the model; | chi2r: the reduced chi-squared between the model and the data; | id: the identification number of the model. | . The parameters of the Voigt function (z, logN, and b) may be either guess or fitted parameters. As a rule, when a system is added to the list it is also fitted to the spectrum: z, logN, and b are the best-fit values and chi2r gives an estimation of the goodness of fit. .",
    "url": "http://localhost:4000/astrocook/structures.html",
    "relUrl": "/structures.html"
  }
  ,"17": {
    "title": "Tables",
    "content": "Playing with tables . . .",
    "url": "http://localhost:4000/astrocook/tables.html",
    "relUrl": "/tables.html"
  }
  
}